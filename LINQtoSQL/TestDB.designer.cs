#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LINQtoSQL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="TestDB")]
	public partial class TestDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertEmployee(Employee instance);
    partial void UpdateEmployee(Employee instance);
    partial void DeleteEmployee(Employee instance);
    partial void InsertDept(Dept instance);
    partial void UpdateDept(Dept instance);
    partial void DeleteDept(Dept instance);
    partial void InsertEmp(Emp instance);
    partial void UpdateEmp(Emp instance);
    partial void DeleteEmp(Emp instance);
    partial void InsertCustomer(Customer instance);
    partial void UpdateCustomer(Customer instance);
    partial void DeleteCustomer(Customer instance);
    partial void InsertTransaction(Transaction instance);
    partial void UpdateTransaction(Transaction instance);
    partial void DeleteTransaction(Transaction instance);
    #endregion
		
		public TestDBDataContext() : 
				base(global::LINQtoSQL.Properties.Settings.Default.TestDBConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public TestDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TestDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TestDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TestDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Employee> Employees
		{
			get
			{
				return this.GetTable<Employee>();
			}
		}
		
		public System.Data.Linq.Table<Dept> Depts
		{
			get
			{
				return this.GetTable<Dept>();
			}
		}
		
		public System.Data.Linq.Table<Emp> Emps
		{
			get
			{
				return this.GetTable<Emp>();
			}
		}
		
		public System.Data.Linq.Table<Customer> Customers
		{
			get
			{
				return this.GetTable<Customer>();
			}
		}
		
		public System.Data.Linq.Table<Transaction> Transactions
		{
			get
			{
				return this.GetTable<Transaction>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetEmployees")]
		public ISingleResult<GetEmployeesResult> GetEmployees([global::System.Data.Linq.Mapping.ParameterAttribute(Name="City", DbType="VarChar(50)")] string city)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), city);
			return ((ISingleResult<GetEmployeesResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.AddNewEmpDetails")]
		public int AddNewEmpDetails([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Name", DbType="VarChar(50)")] string name, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="City", DbType="VarChar(50)")] string city, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Address", DbType="VarChar(50)")] string address)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), name, city, address);
			return ((int)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Employee")]
	public partial class Employee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _City;
		
		private string _Address;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    #endregion
		
		public Employee()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="VarChar(50)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="VarChar(50)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Dept")]
	public partial class Dept : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Deptno;
		
		private string _DName;
		
		private string _Loc;
		
		private EntitySet<Emp> _Emps;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDeptnoChanging(int value);
    partial void OnDeptnoChanged();
    partial void OnDNameChanging(string value);
    partial void OnDNameChanged();
    partial void OnLocChanging(string value);
    partial void OnLocChanged();
    #endregion
		
		public Dept()
		{
			this._Emps = new EntitySet<Emp>(new Action<Emp>(this.attach_Emps), new Action<Emp>(this.detach_Emps));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Deptno", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Deptno
		{
			get
			{
				return this._Deptno;
			}
			set
			{
				if ((this._Deptno != value))
				{
					this.OnDeptnoChanging(value);
					this.SendPropertyChanging();
					this._Deptno = value;
					this.SendPropertyChanged("Deptno");
					this.OnDeptnoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DName", DbType="VarChar(50)")]
		public string DName
		{
			get
			{
				return this._DName;
			}
			set
			{
				if ((this._DName != value))
				{
					this.OnDNameChanging(value);
					this.SendPropertyChanging();
					this._DName = value;
					this.SendPropertyChanged("DName");
					this.OnDNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Loc", DbType="VarChar(50)")]
		public string Loc
		{
			get
			{
				return this._Loc;
			}
			set
			{
				if ((this._Loc != value))
				{
					this.OnLocChanging(value);
					this.SendPropertyChanging();
					this._Loc = value;
					this.SendPropertyChanged("Loc");
					this.OnLocChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dept_Emp", Storage="_Emps", ThisKey="Deptno", OtherKey="Deptno")]
		public EntitySet<Emp> Emps
		{
			get
			{
				return this._Emps;
			}
			set
			{
				this._Emps.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Emps(Emp entity)
		{
			this.SendPropertyChanging();
			entity.Dept = this;
		}
		
		private void detach_Emps(Emp entity)
		{
			this.SendPropertyChanging();
			entity.Dept = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Emp")]
	public partial class Emp : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Empno;
		
		private string _Ename;
		
		private string _Job;
		
		private System.Nullable<int> _Mgr;
		
		private System.Nullable<System.DateTime> _HireDate;
		
		private System.Nullable<decimal> _Sal;
		
		private System.Nullable<decimal> _Comm;
		
		private System.Nullable<int> _Deptno;
		
		private EntitySet<Emp> _Emps;
		
		private EntityRef<Dept> _Dept;
		
		private EntityRef<Emp> _Emp1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmpnoChanging(int value);
    partial void OnEmpnoChanged();
    partial void OnEnameChanging(string value);
    partial void OnEnameChanged();
    partial void OnJobChanging(string value);
    partial void OnJobChanged();
    partial void OnMgrChanging(System.Nullable<int> value);
    partial void OnMgrChanged();
    partial void OnHireDateChanging(System.Nullable<System.DateTime> value);
    partial void OnHireDateChanged();
    partial void OnSalChanging(System.Nullable<decimal> value);
    partial void OnSalChanged();
    partial void OnCommChanging(System.Nullable<decimal> value);
    partial void OnCommChanged();
    partial void OnDeptnoChanging(System.Nullable<int> value);
    partial void OnDeptnoChanged();
    #endregion
		
		public Emp()
		{
			this._Emps = new EntitySet<Emp>(new Action<Emp>(this.attach_Emps), new Action<Emp>(this.detach_Emps));
			this._Dept = default(EntityRef<Dept>);
			this._Emp1 = default(EntityRef<Emp>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Empno", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Empno
		{
			get
			{
				return this._Empno;
			}
			set
			{
				if ((this._Empno != value))
				{
					this.OnEmpnoChanging(value);
					this.SendPropertyChanging();
					this._Empno = value;
					this.SendPropertyChanged("Empno");
					this.OnEmpnoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ename", DbType="VarChar(100)")]
		public string Ename
		{
			get
			{
				return this._Ename;
			}
			set
			{
				if ((this._Ename != value))
				{
					this.OnEnameChanging(value);
					this.SendPropertyChanging();
					this._Ename = value;
					this.SendPropertyChanged("Ename");
					this.OnEnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Job", DbType="VarChar(100)")]
		public string Job
		{
			get
			{
				return this._Job;
			}
			set
			{
				if ((this._Job != value))
				{
					this.OnJobChanging(value);
					this.SendPropertyChanging();
					this._Job = value;
					this.SendPropertyChanged("Job");
					this.OnJobChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mgr", DbType="Int")]
		public System.Nullable<int> Mgr
		{
			get
			{
				return this._Mgr;
			}
			set
			{
				if ((this._Mgr != value))
				{
					if (this._Emp1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMgrChanging(value);
					this.SendPropertyChanging();
					this._Mgr = value;
					this.SendPropertyChanged("Mgr");
					this.OnMgrChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HireDate", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> HireDate
		{
			get
			{
				return this._HireDate;
			}
			set
			{
				if ((this._HireDate != value))
				{
					this.OnHireDateChanging(value);
					this.SendPropertyChanging();
					this._HireDate = value;
					this.SendPropertyChanged("HireDate");
					this.OnHireDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sal", DbType="Money")]
		public System.Nullable<decimal> Sal
		{
			get
			{
				return this._Sal;
			}
			set
			{
				if ((this._Sal != value))
				{
					this.OnSalChanging(value);
					this.SendPropertyChanging();
					this._Sal = value;
					this.SendPropertyChanged("Sal");
					this.OnSalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comm", DbType="Money")]
		public System.Nullable<decimal> Comm
		{
			get
			{
				return this._Comm;
			}
			set
			{
				if ((this._Comm != value))
				{
					this.OnCommChanging(value);
					this.SendPropertyChanging();
					this._Comm = value;
					this.SendPropertyChanged("Comm");
					this.OnCommChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Deptno", DbType="Int")]
		public System.Nullable<int> Deptno
		{
			get
			{
				return this._Deptno;
			}
			set
			{
				if ((this._Deptno != value))
				{
					if (this._Dept.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDeptnoChanging(value);
					this.SendPropertyChanging();
					this._Deptno = value;
					this.SendPropertyChanged("Deptno");
					this.OnDeptnoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Emp_Emp", Storage="_Emps", ThisKey="Empno", OtherKey="Mgr")]
		public EntitySet<Emp> Emps
		{
			get
			{
				return this._Emps;
			}
			set
			{
				this._Emps.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dept_Emp", Storage="_Dept", ThisKey="Deptno", OtherKey="Deptno", IsForeignKey=true)]
		public Dept Dept
		{
			get
			{
				return this._Dept.Entity;
			}
			set
			{
				Dept previousValue = this._Dept.Entity;
				if (((previousValue != value) 
							|| (this._Dept.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Dept.Entity = null;
						previousValue.Emps.Remove(this);
					}
					this._Dept.Entity = value;
					if ((value != null))
					{
						value.Emps.Add(this);
						this._Deptno = value.Deptno;
					}
					else
					{
						this._Deptno = default(Nullable<int>);
					}
					this.SendPropertyChanged("Dept");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Emp_Emp", Storage="_Emp1", ThisKey="Mgr", OtherKey="Empno", IsForeignKey=true)]
		public Emp Emp1
		{
			get
			{
				return this._Emp1.Entity;
			}
			set
			{
				Emp previousValue = this._Emp1.Entity;
				if (((previousValue != value) 
							|| (this._Emp1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Emp1.Entity = null;
						previousValue.Emps.Remove(this);
					}
					this._Emp1.Entity = value;
					if ((value != null))
					{
						value.Emps.Add(this);
						this._Mgr = value.Empno;
					}
					else
					{
						this._Mgr = default(Nullable<int>);
					}
					this.SendPropertyChanged("Emp1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Emps(Emp entity)
		{
			this.SendPropertyChanging();
			entity.Emp1 = this;
		}
		
		private void detach_Emps(Emp entity)
		{
			this.SendPropertyChanging();
			entity.Emp1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Customer")]
	public partial class Customer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Custid;
		
		private string _Cname;
		
		private System.Nullable<decimal> _Balance;
		
		private System.Nullable<bool> _Status;
		
		private EntitySet<Transaction> _Transactions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCustidChanging(int value);
    partial void OnCustidChanged();
    partial void OnCnameChanging(string value);
    partial void OnCnameChanged();
    partial void OnBalanceChanging(System.Nullable<decimal> value);
    partial void OnBalanceChanged();
    partial void OnStatusChanging(System.Nullable<bool> value);
    partial void OnStatusChanged();
    #endregion
		
		public Customer()
		{
			this._Transactions = new EntitySet<Transaction>(new Action<Transaction>(this.attach_Transactions), new Action<Transaction>(this.detach_Transactions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Custid", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Custid
		{
			get
			{
				return this._Custid;
			}
			set
			{
				if ((this._Custid != value))
				{
					this.OnCustidChanging(value);
					this.SendPropertyChanging();
					this._Custid = value;
					this.SendPropertyChanged("Custid");
					this.OnCustidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cname", DbType="VarChar(50)")]
		public string Cname
		{
			get
			{
				return this._Cname;
			}
			set
			{
				if ((this._Cname != value))
				{
					this.OnCnameChanging(value);
					this.SendPropertyChanging();
					this._Cname = value;
					this.SendPropertyChanged("Cname");
					this.OnCnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Balance", DbType="Decimal(9,2)")]
		public System.Nullable<decimal> Balance
		{
			get
			{
				return this._Balance;
			}
			set
			{
				if ((this._Balance != value))
				{
					this.OnBalanceChanging(value);
					this.SendPropertyChanging();
					this._Balance = value;
					this.SendPropertyChanged("Balance");
					this.OnBalanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Bit")]
		public System.Nullable<bool> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Transaction", Storage="_Transactions", ThisKey="Custid", OtherKey="Custid")]
		public EntitySet<Transaction> Transactions
		{
			get
			{
				return this._Transactions;
			}
			set
			{
				this._Transactions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Transactions(Transaction entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_Transactions(Transaction entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Transactions")]
	public partial class Transaction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TransId;
		
		private System.Nullable<int> _Custid;
		
		private string _TransType;
		
		private System.Nullable<System.DateTime> _TransDate;
		
		private System.Nullable<System.TimeSpan> _TransTime;
		
		private System.Nullable<decimal> _TransAmount;
		
		private string _TransRemarks;
		
		private EntityRef<Customer> _Customer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTransIdChanging(int value);
    partial void OnTransIdChanged();
    partial void OnCustidChanging(System.Nullable<int> value);
    partial void OnCustidChanged();
    partial void OnTransTypeChanging(string value);
    partial void OnTransTypeChanged();
    partial void OnTransDateChanging(System.Nullable<System.DateTime> value);
    partial void OnTransDateChanged();
    partial void OnTransTimeChanging(System.Nullable<System.TimeSpan> value);
    partial void OnTransTimeChanged();
    partial void OnTransAmountChanging(System.Nullable<decimal> value);
    partial void OnTransAmountChanged();
    partial void OnTransRemarksChanging(string value);
    partial void OnTransRemarksChanged();
    #endregion
		
		public Transaction()
		{
			this._Customer = default(EntityRef<Customer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TransId
		{
			get
			{
				return this._TransId;
			}
			set
			{
				if ((this._TransId != value))
				{
					this.OnTransIdChanging(value);
					this.SendPropertyChanging();
					this._TransId = value;
					this.SendPropertyChanged("TransId");
					this.OnTransIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Custid", DbType="Int")]
		public System.Nullable<int> Custid
		{
			get
			{
				return this._Custid;
			}
			set
			{
				if ((this._Custid != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustidChanging(value);
					this.SendPropertyChanging();
					this._Custid = value;
					this.SendPropertyChanged("Custid");
					this.OnCustidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransType", DbType="VarChar(50)")]
		public string TransType
		{
			get
			{
				return this._TransType;
			}
			set
			{
				if ((this._TransType != value))
				{
					this.OnTransTypeChanging(value);
					this.SendPropertyChanging();
					this._TransType = value;
					this.SendPropertyChanged("TransType");
					this.OnTransTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransDate", DbType="Date")]
		public System.Nullable<System.DateTime> TransDate
		{
			get
			{
				return this._TransDate;
			}
			set
			{
				if ((this._TransDate != value))
				{
					this.OnTransDateChanging(value);
					this.SendPropertyChanging();
					this._TransDate = value;
					this.SendPropertyChanged("TransDate");
					this.OnTransDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransTime", DbType="Time")]
		public System.Nullable<System.TimeSpan> TransTime
		{
			get
			{
				return this._TransTime;
			}
			set
			{
				if ((this._TransTime != value))
				{
					this.OnTransTimeChanging(value);
					this.SendPropertyChanging();
					this._TransTime = value;
					this.SendPropertyChanged("TransTime");
					this.OnTransTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransAmount", DbType="Decimal(9,2)")]
		public System.Nullable<decimal> TransAmount
		{
			get
			{
				return this._TransAmount;
			}
			set
			{
				if ((this._TransAmount != value))
				{
					this.OnTransAmountChanging(value);
					this.SendPropertyChanging();
					this._TransAmount = value;
					this.SendPropertyChanged("TransAmount");
					this.OnTransAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransRemarks", DbType="VarChar(100)")]
		public string TransRemarks
		{
			get
			{
				return this._TransRemarks;
			}
			set
			{
				if ((this._TransRemarks != value))
				{
					this.OnTransRemarksChanging(value);
					this.SendPropertyChanging();
					this._TransRemarks = value;
					this.SendPropertyChanged("TransRemarks");
					this.OnTransRemarksChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Transaction", Storage="_Customer", ThisKey="Custid", OtherKey="Custid", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.Transactions.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.Transactions.Add(this);
						this._Custid = value.Custid;
					}
					else
					{
						this._Custid = default(Nullable<int>);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	public partial class GetEmployeesResult
	{
		
		private int _ID;
		
		private string _Name;
		
		private string _City;
		
		private string _Address;
		
		public GetEmployeesResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL")]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="VarChar(50)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this._City = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="VarChar(50)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this._Address = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
